/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       John Schmidt                                              */
/*    Created:      Tue Nov 12 2019                                           */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/
// Arcade Control
// This program uses remote control values to move the robot.
//
// Robot Configuration:
//
//
#include "vex.h"

using namespace vex;

// define your global instances of motors and other devices here
vex::motor LeftFront         = vex::motor( vex::PORT11 );
vex::motor LeftBack          = vex::motor( vex::PORT20 );
vex::motor RightFront         = vex::motor( vex::PORT1 );
vex::motor RightBack         = vex::motor( vex::PORT10 );
vex::motor ArmMotor           = vex::motor( vex::PORT5 );
vex::motor TrayMotor          = vex::motor( vex::PORT6 );
vex::motor LeftIntake         = vex::motor( vex::PORT2 );
vex::motor RightIntake        = vex::motor( vex::PORT9 );

vex::controller Controller1          = vex::controller();

int correct;
int selected;

int x;
int y;

bool troubleshooting = false;

void gui() {  
  Brain.Screen.clearScreen();
  Brain.Screen.clearLine();

  selected = -1;
  Brain.Screen.drawRectangle(0, 0, 240, 120, vex::color::blue);
  Brain.Screen.drawRectangle(240,0,240,120,vex::color::red);
  Brain.Screen.drawRectangle(0, 125, 240, 120, vex::color::blue);
  Brain.Screen.drawRectangle(240, 125, 240, 120, vex::color::red);
  
  x = -20;
  y = -20;
  while(!Brain.Screen.pressing()){
    vex::task::sleep(20);
  }
  while(selected < 0){
    x = Brain.Screen.xPosition();
    y = Brain.Screen.yPosition();

    if(x < 240 && y < 125 && x > 0 && y > 0){
      selected = 1;
    } else if(x < 240 && y > 125 && x > 0 && y > 0){
      selected = 2;
    } else if(x > 240 && y < 125 && x > 0 && y > 0){
      selected = 3;
    } else if(x >240 && y > 125 && x > 0 && y > 0){
      selected = 4;
    }
  }
  vex::task::sleep(600);
  Brain.Screen.clearScreen();
  Brain.Screen.clearLine();
  Brain.Screen.printAt(0,20,true, "Program selected: %d", selected);
  Brain.Screen.printAt(0,50,true, "Correct?");
  Brain.Screen.drawRectangle(0,75, 240, 240, vex::color::green);
  Brain.Screen.drawRectangle(240,75, 240, 240, vex::color::red);

  while(!Brain.Screen.pressing()){
    vex::task::sleep(20);
  }
  x = Brain.Screen.xPosition();
  y = Brain.Screen.yPosition();
  vex::task::sleep(300);
  while(correct < 0){
    x = Brain.Screen.xPosition();
    y = Brain.Screen.yPosition();

    if(x < 240 && y < 240 && x > 0 && y > 75){
      correct = 1;
    } else if(x > 240 && y < 240 && y > 75){
      correct = 0;
    } 
  }
}

void setup(){
  TrayMotor.resetRotation();

}

void drive(){
  RightBack.startRotateTo(1,vex::rotationUnits::rev);
  LeftBack.startRotateTo(1,vex::rotationUnits::rev);
  RightFront.startRotateTo(1,vex::rotationUnits::rev);
  LeftFront.startRotateTo(1,vex::rotationUnits::rev);
}

void stop(){
  RightBack.stop();
  LeftBack.stop();
  RightFront.stop();
  LeftFront.stop();
}

int main() {
  vexcodeInit();
  setup();
  
  while(correct < 1){
    correct = 1; //change
    selected = -1;
    //gui(); 
  } 
  
  Brain.Screen.clearScreen();
  Brain.Screen.clearLine();
  Brain.Screen.printAt(5,20,true, "Program selected: %d", selected);

  LeftIntake.setVelocity(100, vex::velocityUnits::pct);
  RightIntake.setVelocity(100, vex::velocityUnits::pct);
  LeftBack.setVelocity(50, vex::velocityUnits::pct);
  RightBack.setVelocity(50, vex::velocityUnits::pct);
  LeftFront.setVelocity(50, vex::velocityUnits::pct);
  RightFront.setVelocity(50, vex::velocityUnits::pct);

  while(1) {

    // Drive Control
    LeftFront.spin(vex::directionType::fwd, (Controller1.Axis1.value() + Controller1.Axis3.value())/2, vex::velocityUnits::pct);
    LeftBack.spin(vex::directionType::fwd, (Controller1.Axis1.value() + Controller1.Axis3.value())/2, vex::velocityUnits::pct);
    RightFront.spin(vex::directionType::fwd, (Controller1.Axis1.value() - Controller1.Axis3.value())/2, vex::velocityUnits::pct);
    RightBack.spin(vex::directionType::fwd, (Controller1.Axis1.value() - Controller1.Axis3.value())/2, vex::velocityUnits::pct);

    if(Controller1.ButtonA.pressing()){
      TrayMotor.spin(vex::directionType::rev, 10, vex::velocityUnits::pct);
    } else if(Controller1.ButtonB.pressing()){
      TrayMotor.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
    } else if(Controller1.ButtonL2.pressing() && TrayMotor.rotation(vex::rotationUnits::deg) > -360){
      //Doesn't stop if this pressed - allows the tray motor to move when arm motor goes up until it reaches -366deg
    } 
    else {
      TrayMotor.stop(vex::brakeType::hold);
    }

    if(Controller1.ButtonL1.pressing()){
      ArmMotor.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
    } else if(Controller1.ButtonL2.pressing()){
      ArmMotor.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
      if(TrayMotor.rotation(vex::rotationUnits::deg) > -360){
        TrayMotor.spin(vex::directionType::rev, 40, vex::velocityUnits::pct);
      }
    } else {
      ArmMotor.stop(vex::brakeType::hold);

    }

    if(Controller1.ButtonR1.pressing()){ //intake
      LeftIntake.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
      RightIntake.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
    } else if(Controller1.ButtonR2.pressing()){ //outtake
      LeftIntake.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
      RightIntake.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
    } else {
      LeftIntake.stop(vex::brakeType::hold);
      RightIntake.stop(vex::brakeType::hold);
    }

    // Sleep the task for a short amount of time to prevent wasted resources.
    vex::task::sleep(20);

  }
}
