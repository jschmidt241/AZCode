/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       C:\Users\StudentB                                         */
/*    Created:      Mon Jan 27 2020                                           */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"
#include <cmath>

using namespace vex;

competition Competition;

vex::motor LeftFront         = vex::motor( vex::PORT12 );
vex::motor LeftBack          = vex::motor( vex::PORT14 );
vex::motor RightFront         = vex::motor( vex::PORT4 );
vex::motor RightBack         = vex::motor( vex::PORT10 );
vex::motor ArmMotor           = vex::motor( vex::PORT5 );
vex::motor TrayMotor         = vex::motor( vex::PORT19 );
vex::motor LeftIntake         = vex::motor( vex::PORT1 );
vex::motor RightIntake       = vex::motor( vex::PORT13 );

vex::controller Controller1          = vex::controller();

//Constant Definitions
int DriverDuration = 20;
float DriveKp = 0.04;
float DriveKi = 0;
float DriveKd = 0;

float ArmKp = 0;
float ArmKi = 0;
float ArmKd = 0;

float IntakeKp = 0.04;
float IntakeKi = 0;
float IntakeKd = 0;

float TrayKp = 0;
float TrayKi = 0;
float TrayKd = 0;

float LturnK = 1;
float RturnK = 1;
float turnK = 0.3;

bool LED_On;

class PID
{
  public:
  int Target;
  int Actual;
  int LastError;
  int LastTarget;
  int Error;
  int Integral;
  int Derivative;

  bool auton;
  float velCap;
  float acc;
  float base;
  int sign;

  PID(int a, int b, int c, int d, bool e) {
    Target = a;
    Actual = b;
    LastError = c;
    LastTarget = d;
    auton = e;
  }

  void update(){
    Error = Target - Actual; //Proportional calculations

    if(abs(Target - LastTarget) < 1 ){
      Integral = Integral + Error; //Integral Calculations
    } else {
      Integral = 0;
    }

    Derivative = Error - LastError; //Derivative Calculations

    LastError = Error;
    LastTarget = Target;

    if(auton){
      sign = Error / std::abs(Error);

      acc = acc + base;

      if(std::abs(Error) > velCap){
        Error = velCap;
      }
    }    
  }

  void setTarget(int a){
    Target = a;
  }

  void setActual(int a){
    Actual = a;
  }

  void setAuton(bool a){
    auton = a;
  }
};

PID LeftSide(0, 0, 0, 0, true);
PID RightSide(0, 0, 0, 0, true);
PID Arm(0, 0, 0, 0, false);
PID Tray(0, 0, 0, 0, false);
PID LIntake(0, 0, 0, 0, false);
PID RIntake(0, 0, 0, 0, false);

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
  vex::pwm_out LED = vex::pwm_out(Brain.ThreeWirePort.A);
  LED.state(100, vex::percentUnits::pct);
  
  LeftBack.resetPosition();
  LeftFront.resetPosition();
  RightFront.resetPosition();
  RightBack.resetPosition();

  ArmMotor.resetPosition();
  TrayMotor.resetPosition();
  RightIntake.resetPosition();
  LeftIntake.resetPosition();

  LeftBack.setStopping(vex::brakeType::coast);
  LeftFront.setStopping(vex::brakeType::coast);
  RightFront.setStopping(vex::brakeType::coast);
  RightBack.setStopping(vex::brakeType::coast);

  ArmMotor.setStopping(vex::brakeType::hold);
  TrayMotor.setStopping(vex::brakeType::hold);
  RightIntake.setStopping(vex::brakeType::coast);
  LeftIntake.setStopping(vex::brakeType::coast);

}

/*---------------------------------------------------------------------------*/
/*                              Autonomous Task                              */
/*                                                                           */
/*---------------------------------------------------------------------------*/

void setTargets(int Arm1, int Tray1, int LeIntake, int RiIntake){
  Arm.setTarget(Arm1);
  Tray.setTarget(Tray1);
  LIntake.setTarget(LeIntake);
  RIntake.setTarget(RiIntake);
}

int counter;
int endCounter;

void autonPID(){
  counter = 0;

  while(counter < endCounter){
    LeftSide.setActual((LeftFront.position(vex::rotationUnits::deg) + LeftBack.position(vex::rotationUnits::deg))/2);
    RightSide.setActual((RightFront.position(vex::rotationUnits::deg) + RightBack.position(vex::rotationUnits::deg))/2);

    LeftSide.update();
    RightSide.update();

    LeftFront.spin(vex::directionType::fwd, LeftSide.Error, vex::voltageUnits::volt);
    LeftBack.spin(vex::directionType::fwd, LeftSide.Error, vex::voltageUnits::volt);
    RightFront.spin(vex::directionType::fwd, RightSide.Error, vex::voltageUnits::volt);
    RightBack.spin(vex::directionType::fwd, RightSide.Error, vex::voltageUnits::volt);

    Arm.setActual(ArmMotor.velocity(vex::velocityUnits::pct));
    Tray.setActual(TrayMotor.velocity(vex::velocityUnits::pct));
    RIntake.setActual(RightIntake.velocity(vex::velocityUnits::pct));
    LIntake.setActual(LeftIntake.velocity(vex::velocityUnits::pct));

    Arm.update();
    Tray.update();
    RIntake.update();
    LIntake.update();

    ArmMotor.spin(vex::directionType::fwd, ((Arm.Target*( 1 )) + (Arm.Error*( ArmKp )) + (Arm.Integral*( ArmKi )) + (Arm.Derivative*( ArmKd ))), vex::voltageUnits::volt);
    TrayMotor.spin(vex::directionType::fwd, ((Tray.Target*( 1 )) + (Tray.Error*( TrayKp )) + (Tray.Integral*( TrayKi )) + (Tray.Derivative*( TrayKd ))), vex::voltageUnits::volt);
    LeftIntake.spin(vex::directionType::fwd, ((LIntake.Target*( 1 )) + (LIntake.Error*( IntakeKp )) + (LIntake.Integral*( IntakeKi )) + (LIntake.Derivative*( IntakeKd ))), vex::voltageUnits::volt);
    RightIntake.spin(vex::directionType::rev, ((RIntake.Target*( 1 )) + (RIntake.Error*( IntakeKp )) + (RIntake.Integral*( IntakeKi )) + (RIntake.Derivative*( IntakeKd ))), vex::voltageUnits::volt);

    counter = counter + 20;
    vex::task::sleep(20);
  }
}

void stopMotors(){
  LeftFront.stop();
  RightFront.stop();
  LeftBack.stop();
  RightBack.stop();

  RightIntake.stop();
  LeftIntake.stop();
  ArmMotor.stop();
  TrayMotor.stop();

}

void setAuton(float left, float right, int Arm1, int Tray1, int LeIntake, int RiIntake, int count){
  LeftBack.resetPosition();
  LeftFront.resetPosition();
  RightFront.resetPosition();
  RightBack.resetPosition();

  setTargets(Arm1, Tray1, LeIntake, RiIntake);
  right = right * -1;

  left = left * 26.2;
  right = right * 26.2;
  
  LeftSide.setTarget(left);
  RightSide.setTarget(right);
  endCounter = count;
}

void driveCode(int duration){

  LeftSide.setActual(((LeftFront.velocity(vex::velocityUnits::pct) + LeftBack.velocity(vex::velocityUnits::pct))/2) * 0.4 );
  RightSide.setActual(((RightFront.velocity(vex::velocityUnits::pct) + RightBack.velocity(vex::velocityUnits::pct))/2) * 0.4 );

  LeftSide.update();
  RightSide.update(); //Performs PID calculations and sets the new voltage

  LturnK = (LeftSide.Target - RightSide.Target) * turnK; 
  RturnK = (RightSide.Target - LeftSide.Target) * turnK;
  if(LturnK < 1){
    LturnK = 1;
  }
  if(RturnK < 1){
    RturnK = 1;
  }
  if(LturnK > 5){
    LturnK = 5;
  }
  if(RturnK > 5){
    RturnK = 5;
  }

  LeftFront.spin(vex::directionType::fwd, ((LeftSide.Target*( 0.3 * turnK )) + (LeftSide.Error * ( DriveKp )) + (LeftSide.Integral*( DriveKi )) + (LeftSide.Derivative * ( DriveKd ))), vex::voltageUnits::volt);
  LeftBack.spin(vex::directionType::fwd, ((LeftSide.Target*( 0.3 * turnK )) + (LeftSide.Error * ( DriveKp )) + (LeftSide.Integral*( DriveKi )) + (LeftSide.Derivative * ( DriveKd ))), vex::voltageUnits::volt);
  RightFront.spin(vex::directionType::fwd, ((RightSide.Target*( 0.3 * turnK )) + (RightSide.Error * ( DriveKp )) + (RightSide.Integral*( DriveKi )) + (RightSide.Derivative * ( DriveKd ))), vex::voltageUnits::volt);
  RightBack.spin(vex::directionType::fwd, ((RightSide.Target*( 0.3 * turnK )) + (RightSide.Error * ( DriveKp )) + (RightSide.Integral*( DriveKi )) + (RightSide.Derivative * ( DriveKd ))), vex::voltageUnits::volt);

  turnK = 1; //Resets the turn constant to keep it from affecting later iterations

  Brain.Screen.clearScreen();
  Brain.Screen.clearLine();
  Brain.Screen.printAt(10, 15, "Left temp: %f", LeftFront.temperature(vex::temperatureUnits::fahrenheit));  
  Brain.Screen.printAt(10, 30, "Right temp: %f", RightFront.temperature(vex::temperatureUnits::fahrenheit));
  Brain.Screen.printAt(10, 60, "Tray Position: %f", TrayMotor.position(vex::rotationUnits::deg));

  Arm.setActual(ArmMotor.velocity(vex::velocityUnits::pct));
  Tray.setActual(TrayMotor.velocity(vex::velocityUnits::pct));
  RIntake.setActual(RightIntake.velocity(vex::velocityUnits::pct));
  LIntake.setActual(LeftIntake.velocity(vex::velocityUnits::pct));

  Arm.update();
  Tray.update();
  RIntake.update();
  LIntake.update();

  ArmMotor.spin(vex::directionType::fwd, ((Arm.Target*( 1 )) + (Arm.Error*( ArmKp )) + (Arm.Integral*( ArmKi )) + (Arm.Derivative*( ArmKd ))), vex::voltageUnits::volt);
  LeftIntake.spin(vex::directionType::fwd, ((LIntake.Target*( 1 )) + (LIntake.Error*( IntakeKp )) + (LIntake.Integral*( IntakeKi )) + (LIntake.Derivative*( IntakeKd ))), vex::voltageUnits::volt);
  RightIntake.spin(vex::directionType::rev, ((RIntake.Target*( 1 )) + (RIntake.Error*( IntakeKp )) + (RIntake.Integral*( IntakeKi )) + (RIntake.Derivative*( IntakeKd ))), vex::voltageUnits::volt);
  /**
  if(!trayLoop){
    TrayMotor.spin(vex::directionType::fwd, ((Tray.Target*( 1 )) + (Tray.Error*( TrayKp )) + (Tray.Integral*( TrayKi )) + (Tray.Derivative*( TrayKd ))), vex::voltageUnits::volt);
  } else if(trayLoop){
    Tray.Actual = TrayMotor.position(vex::rotationUnits::deg);
    Tray.update();
    TrayMotor.spin(vex::directionType::fwd, (Tray.Error*( TrayKp )) + (Tray.Integral*( TrayKi )) + (Tray.Derivative*( TrayKd )), vex::voltageUnits::volt);
  }
  **/
  vex::task::sleep(duration);
}

void autonomous(void) {

}
/*---------------------------------------------------------------------------*/
/*                              User Control Task                            */
/*                                                                           */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  vex::pwm_out LED = vex::pwm_out(Brain.ThreeWirePort.A);

  LeftSide.setAuton(false);
  RightSide.setAuton(false);

  while(1){
    if(Controller1.ButtonA.pressing()){
      Tray.setTarget(-18);
    } else if(Controller1.ButtonY.pressing()){
      Tray.setTarget(90);
    } else if (Controller1.ButtonUp.pressing()){
      Tray.setTarget(-4);
    } else {
      Tray.setTarget(0);
    }


    if(Controller1.ButtonL1.pressing()){
      Arm.setTarget(100);
    } else if(Controller1.ButtonL2.pressing()){
      Arm.setTarget(-100);
    } else {
      Arm.setTarget(0);
    }

    if(Controller1.ButtonR1.pressing()){ //intake
      RIntake.setTarget(100);
      LIntake.setTarget(100);
    } else if(Controller1.ButtonR2.pressing()){ //outtake
      RIntake.setTarget(-100);
      LIntake.setTarget(-100);
    } else {
      RIntake.setTarget(0);
      LIntake.setTarget(0);
    }
    
    RightSide.setTarget((Controller1.Axis1.value() - Controller1.Axis3.value())/2);
    LeftSide.setTarget((Controller1.Axis1.value() + Controller1.Axis3.value())/2);

    if(Controller1.ButtonDown.pressing()){
      RIntake.setTarget(-10);
      LIntake.setTarget(-10);
      RightSide.setTarget(15);
      LeftSide.setTarget(-15);
      Tray.setTarget(20);
    }

    if(Controller1.ButtonX.pressing()){
      LeftSide.setTarget(20);
      RightSide.setTarget(-20);
      Tray.setTarget(-100);

      for(int i=0; i< 15; i++){
        driveCode(DriverDuration);
      }
      stopMotors();

      LeftSide.setTarget(-20);
      RightSide.setTarget(20);
      Tray.setTarget(50);
      stopMotors();
    }

    if(Controller1.ButtonUp.pressing()){
      LED_On = !LED_On;
      if(LED_On){
        LED.state(100, vex::percentUnits::pct);
        vex::task::sleep(200);
      } else{
        LED.state(0, vex::percentUnits::pct);
        vex::task::sleep(200);
      }
    }

    if(LeftFront.temperature(vex::temperatureUnits::fahrenheit) > 115 || RightFront.temperature(vex::temperatureUnits::fahrenheit) > 115){
      Controller1.rumble("-");
    }

    driveCode(DriverDuration);
    
  }
}

int main() {
  

  // Callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}