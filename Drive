/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       John Schmidt                                              */
/*    Created:      Tue Dec 03 2019                                           */
/*    Description:  V5 project-PID                                            */
/*                                                                            */
/*----------------------------------------------------------------------------*/
//
// PID Base Control
//

#include "vex.h"

using namespace vex;

vex::motor LeftFront         = vex::motor( vex::PORT3 ); //
vex::motor LeftBack          = vex::motor( vex::PORT7 ); //
vex::motor RightFront         = vex::motor( vex::PORT1 ); //
vex::motor RightBack         = vex::motor( vex::PORT10 ); //
vex::motor ArmMotor           = vex::motor( vex::PORT5 ); //
vex::motor TrayMotor         = vex::motor( vex::PORT19 ); //
vex::motor LeftIntake         = vex::motor( vex::PORT2 ); //
vex::motor RightIntake       = vex::motor( vex::PORT20 ); //

vex::controller Controller1          = vex::controller();


int DriverDuration = 20;
float DriveKp = 0.2;
float DriveKi = 0.01;
float DriveKd = 0.1;

float ArmKp = 0.2;
float ArmKi = 0;
float ArmKd = 0;

float IntakeKp = 0.2;
float IntakeKi = 0;
float IntakeKd = 0;

float TrayKp = 0.2;
float TrayKi = 0;
float TrayKd = 0;

class PID 
{
  public:
  int Target;
  int Actual;
  int LastError;
  int LastTarget;
  int Error;
  int Integral;
  int Derivative;

  PID(int a, int b, int c, int d) {
    Target = a;
    Actual = b;
    LastError = c;
    LastTarget = d;
  }
  
  void update(){

    Error = Target - Actual; //Proportional Calculations

    if(abs(Target - LastTarget) < 5 ){
      Integral = Integral + Error; //Integral Calculations
    } else {
      Integral = 0; //Decays the integral value if the target values are different
    }

    Derivative = Error - LastError; //Derivative Calculations

    LastError = Error;
    LastTarget = Target;
  }

  void setTarget(int a){
    Target = a;
  }

  void setActual(int a){
    Actual = a;
  }

};

PID LeftSide(0, 0, 0, 0);
PID RightSide(0, 0, 0, 0);
PID Arm(0, 0, 0, 0);
PID Tray(0, 0, 0, 0);
PID Intake(0, 0, 0, 0);

void setup(){

  LeftBack.setStopping(vex::brakeType::coast);
  LeftFront.setStopping(vex::brakeType::coast);
  RightFront.setStopping(vex::brakeType::coast);
  RightBack.setStopping(vex::brakeType::coast);

  ArmMotor.setStopping(vex::brakeType::hold);
  TrayMotor.setStopping(vex::brakeType::hold);
  RightIntake.setStopping(vex::brakeType::hold);
  LeftIntake.setStopping(vex::brakeType::hold);

}

void setTargets(int Left, int Right, int Arm1, int Tray1, int Intake1){
  LeftSide.setTarget(Left);
  RightSide.setTarget(Right);
  Arm.setTarget(Arm1);
  Tray.setTarget(Tray1);
  Intake.setTarget(Intake1);
}

void driveCode(int duration){
  LeftSide.setActual((LeftFront.velocity(vex::velocityUnits::pct) + LeftBack.velocity(vex::velocityUnits::pct))/2);
  RightSide.setActual((RightFront.velocity(vex::velocityUnits::pct) + RightBack.velocity(vex::velocityUnits::pct))/2);

  LeftSide.update();
  RightSide.update();

  LeftFront.spin(vex::directionType::fwd, ((LeftSide.Target*( 1 )) + (LeftSide.Error * ( DriveKp )) + (LeftSide.Integral*( DriveKi )) + (LeftSide.Derivative * ( DriveKd ))), vex::velocityUnits::pct);
  LeftBack.spin(vex::directionType::fwd, ((LeftSide.Target*( 1 )) + (LeftSide.Error * ( DriveKp )) + (LeftSide.Integral*( DriveKi )) + (LeftSide.Derivative * ( DriveKd ))), vex::velocityUnits::pct);
  RightFront.spin(vex::directionType::fwd, ((RightSide.Target*( 1 )) + (RightSide.Error * ( DriveKp )) + (RightSide.Integral*( DriveKi )) + (RightSide.Derivative * ( DriveKd ))), vex::velocityUnits::pct);
  RightBack.spin(vex::directionType::fwd, ((RightSide.Target*( 1 )) + (RightSide.Error * ( DriveKp )) + (RightSide.Integral*( DriveKi )) + (RightSide.Derivative * ( DriveKd ))), vex::velocityUnits::pct);

  Arm.setActual(ArmMotor.velocity(vex::velocityUnits::pct));
  Tray.setActual(TrayMotor.velocity(vex::velocityUnits::pct));
  Intake.setActual((LeftIntake.velocity(vex::velocityUnits::pct) + RightIntake.velocity(vex::velocityUnits::pct))/2);

  Arm.update();
  Tray.update();
  Intake.update();

  ArmMotor.spin(vex::directionType::fwd, ((Arm.Target*( 1 )) + (Arm.Error*( ArmKp )) + (Arm.Integral*( ArmKi )) + (Arm.Derivative*( ArmKd ))), vex::velocityUnits::pct);
  TrayMotor.spin(vex::directionType::fwd, ((Tray.Target*( 1 )) + (Tray.Error*( TrayKp )) + (Tray.Integral*( TrayKi )) + (Tray.Derivative*( TrayKd ))), vex::velocityUnits::pct);
  LeftIntake.spin(vex::directionType::fwd, ((Intake.Target*( 1 )) + (Intake.Error*( IntakeKp )) + (Intake.Integral*( IntakeKi )) + (Intake.Derivative*( IntakeKd ))), vex::velocityUnits::pct);
  RightIntake.spin(vex::directionType::rev, ((Intake.Target*( 1 )) + (Intake.Error*( IntakeKp )) + (Intake.Integral*( IntakeKi )) + (Intake.Derivative*( IntakeKd ))), vex::velocityUnits::pct);

  vex::task::sleep(duration);
}

void auton(){
  setTargets(80, 80, 0, 20, 50);
  driveCode(100);


}

int main() {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  setup();

  auton();

  while(1){
    Brain.Screen.clearLine();
    Brain.Screen.print(TrayMotor.rotation(vex::rotationUnits::deg));

    if(Controller1.ButtonA.pressing()){
      Tray.setTarget(-50);
    } else if(Controller1.ButtonB.pressing()){
      if(TrayMotor.rotation(vex::rotationUnits::deg) < -120){ //Adds a stop to keep the tray from rotating backwards too far
        Tray.setTarget(90);
      } else {
        Tray.setTarget(0);
      }
    } else {
      Tray.setTarget(0);
    }
    if(Controller1.ButtonL1.pressing()){
      Arm.setTarget(100);
    } else if(Controller1.ButtonL2.pressing()){
      Arm.setTarget(-100);
      if(TrayMotor.rotation(vex::rotationUnits::deg) > -360){
        Tray.setTarget(-40);
      }
    } else {
      Arm.setTarget(0);
    }
    if(Controller1.ButtonR1.pressing()){ //intake
      Intake.setTarget(100);
    } else if(Controller1.ButtonR2.pressing()){ //outtake
      Intake.setTarget(-100);
    } else {
      Intake.setTarget(0);
    }
    
    RightSide.setTarget((Controller1.Axis1.value() - Controller1.Axis3.value())/2 );
    LeftSide.setTarget((Controller1.Axis1.value() + Controller1.Axis3.value())/2);

    driveCode(DriverDuration);
    
  }
}